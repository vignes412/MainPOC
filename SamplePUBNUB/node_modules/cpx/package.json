{
  "_args": [
    [
      {
        "raw": "cpx@^1.5.0",
        "scope": null,
        "escapedName": "cpx",
        "name": "cpx",
        "rawSpec": "^1.5.0",
        "spec": ">=1.5.0 <2.0.0",
        "type": "range"
      },
      "D:\\MiniProject-Trainee\\ReactJS\\SamplePUBNUB"
    ]
  ],
  "_from": "cpx@>=1.5.0 <2.0.0",
  "_id": "cpx@1.5.0",
  "_inCache": true,
  "_location": "/cpx",
  "_nodeVersion": "6.3.0",
  "_npmOperationalInternal": {
    "host": "packages-16-east.internal.npmjs.com",
    "tmp": "tmp/cpx-1.5.0.tgz_1473026309757_0.09186802757903934"
  },
  "_npmUser": {
    "name": "mysticatea",
    "email": "star.ctor@gmail.com"
  },
  "_npmVersion": "3.8.9",
  "_phantomChildren": {},
  "_requested": {
    "raw": "cpx@^1.5.0",
    "scope": null,
    "escapedName": "cpx",
    "name": "cpx",
    "rawSpec": "^1.5.0",
    "spec": ">=1.5.0 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "#DEV:/"
  ],
  "_resolved": "https://registry.npmjs.org/cpx/-/cpx-1.5.0.tgz",
  "_shasum": "185be018511d87270dedccc293171e37655ab88f",
  "_shrinkwrap": null,
  "_spec": "cpx@^1.5.0",
  "_where": "D:\\MiniProject-Trainee\\ReactJS\\SamplePUBNUB",
  "author": {
    "name": "Toru Nagashima"
  },
  "bin": {
    "cpx": "bin/index.js"
  },
  "bugs": {
    "url": "https://github.com/mysticatea/cpx/issues"
  },
  "dependencies": {
    "babel-runtime": "^6.9.2",
    "chokidar": "^1.6.0",
    "duplexer": "^0.1.1",
    "glob": "^7.0.5",
    "glob2base": "^0.0.12",
    "minimatch": "^3.0.2",
    "mkdirp": "^0.5.1",
    "resolve": "^1.1.7",
    "safe-buffer": "^5.0.1",
    "shell-quote": "^1.6.1",
    "subarg": "^1.0.0"
  },
  "description": "Copy file globs, watching for changes.",
  "devDependencies": {
    "babel-cli": "^6.11.4",
    "babel-plugin-transform-runtime": "^6.9.0",
    "babel-plugin-unassert": "^2.1.1",
    "babel-preset-es2015": "^6.9.0",
    "babel-preset-power-assert": "^1.0.0",
    "babel-register": "^6.9.0",
    "codecov": "^1.0.1",
    "cross-env": "^2.0.0",
    "eslint": "^3.4.0",
    "eslint-config-mysticatea": "^6.0.0",
    "if-node-version": "^1.0.0",
    "mocha": "^3.0.2",
    "npm-run-all": "^3.1.0",
    "nyc": "^8.1.0",
    "opener": "^1.4.1",
    "power-assert": "^1.4.1",
    "rimraf": "^2.5.3",
    "shelljs": "^0.7.0",
    "through": "^2.3.8"
  },
  "directories": {},
  "dist": {
    "shasum": "185be018511d87270dedccc293171e37655ab88f",
    "tarball": "https://registry.npmjs.org/cpx/-/cpx-1.5.0.tgz"
  },
  "files": [
    "bin",
    "lib"
  ],
  "gitHead": "4e8b1931e9674de39aa9f3213f9ca410b9279fad",
  "homepage": "https://github.com/mysticatea/cpx",
  "keywords": [
    "cp",
    "cli",
    "tool",
    "commandline",
    "sync",
    "rsync",
    "watch",
    "observe",
    "copy",
    "dir",
    "directory",
    "directories",
    "file",
    "files"
  ],
  "license": "MIT",
  "main": "lib/index.js",
  "maintainers": [
    {
      "name": "mysticatea",
      "email": "star.ctor@gmail.com"
    }
  ],
  "name": "cpx",
  "optionalDependencies": {},
  "readme": "# cpx\n\n[![npm version](https://img.shields.io/npm/v/cpx.svg)](https://www.npmjs.com/package/cpx)\n[![Downloads/month](https://img.shields.io/npm/dm/cpx.svg)](http://www.npmtrends.com/cpx)\n[![Build Status](https://travis-ci.org/mysticatea/cpx.svg?branch=master)](https://travis-ci.org/mysticatea/cpx)\n[![codecov](https://codecov.io/gh/mysticatea/cpx/branch/master/graph/badge.svg)](https://codecov.io/gh/mysticatea/cpx)\n[![Dependency Status](https://david-dm.org/mysticatea/cpx.svg)](https://david-dm.org/mysticatea/cpx)\n\nCopy file globs, watching for changes.\n\nThis module provides a CLI tool like `cp`, but with watching.\n\n\n## Installation\n\n```\nnpm install cpx\n```\n\n\n## Usage\n\n```\nUsage: cpx <source> <dest> [options]\n\n    Copy files, watching for changes.\n\n        <source>  The glob of target files.\n        <dest>    The path of a destination directory.\n\nOptions:\n\n    -c, --command <command>   A command text to transform each file.\n    -C, --clean               Clean files that matches <source> like pattern in\n                              <dest> directory before the first copying.\n    -L, --dereference         Follow symbolic links when copying from them.\n    -h, --help                Print usage information.\n    --include-empty-dirs      The flag to copy empty directories which is\n                              matched with the glob.\n    --no-initial              The flag to not copy at the initial time of watch.\n                              Use together '--watch' option.\n    -p, --preserve            The flag to copy attributes of files.\n                              This attributes are uid, gid, atime, and mtime.\n    -t, --transform <name>    A module name to transform each file. cpx lookups\n                                the specified name via \"require()\".\n    -u, --update              The flag to not overwrite files on destination if\n                              the source file is older.\n    -v, --verbose             Print copied/removed files.\n    -V, --version             Print the version number.\n    -w, --watch               Watch for files that matches <source>, and copy\n                              the file to <dest> every changing.\n```\n\n\n## Example\n\n```\n$ cpx \"src/**/*.{html,png,jpg}\" app --watch\n```\n\nThis example will copy html/png/jpg files from `src` directory to `app`\ndirectory, keeping file tree structure.\nWhenever the files are changed, copy them.\n\n> Since Bash expands globs, requires to enclose it with double quotes.\n\nYou can use together [Browserify](http://browserify.org).\n\n```\n$ cpx \"src/**/*.{html,png,jpg}\" app -w & watchify src/index.js -o app/index.js\n```\n\nYou can use shell commands to convert each file.\n\n```\n$ cpx \"src/**/*.js\" app -w -c \"babel --source-maps inline\"\n```\n\nYou can use the transform packages for Browserify.\n\n```\n$ cpx \"src/**/*.js\" app -w -t babelify -t uglifyify\n```\n\nIt maybe can use to add header comment, to optimize images, or etc...\n\n\n## Node.js API\n\nYou can use this module as a node module.\n\n```js\nvar cpx = require(\"cpx\");\n```\n\n### cpx.copy\n\n```ts\ncpx.copy(source, dest, options, callback)\ncpx.copy(source, dest, callback)\n```\n\n- **source** `{string}` -- A file glob of copy targets.\n- **dest** `{string}` -- A file path of a destination directory.\n- **options** `{object}`\n  - **options.clean** `{boolean}` -- The flag to remove files that copied on past before copy. Default: `false`.\n  - **options.dereference** `{boolean}` -- The flag to follow symbolic links when copying from them. Default: `false`.\n  - **options.includeEmptyDirs** `{boolean}` -- The flag to copy empty directories which is matched with the glob. Default: `false`.\n  - **options.initialCopy** `{boolean}` -- The flag to not copy at the initial time of watch. This is for `cpx.watch()`. Default: `true`.\n  - **options.preserve** `{boolean}` -- The flag to copy uid, gid, atime, and mtime of files. Default: `false`.\n  - **options.transform** `{((filepath: string) => stream.Transform)[]}` -- Functions that creates a `stream.Transform` object to transform each copying file.\n  - **options.update** `{boolean}` -- The flag to not overwrite files on destination if the source file is older. Default: `false`.\n- **callback** `{(err: Error|null) => void}` -- A function that is called at done.\n\nCopy files that matches with `source` glob to `dest` directory.\n\n### cpx.copySync\n\n```ts\ncpx.copySync(source, dest, options)\ncpx.copySync(source, dest)\n```\n\nA synchronous function of `cpx.copy`.\n\nArguments is almost same as `cpx.copy`.\nBut `options.transform` is not supported.\n\n### cpx.watch\n\n```ts\ncpx.watch(source, dest, options)\ncpx.watch(source, dest)\n```\n\nCopy files that matches with `source` glob string to `dest` directory.\nAfter the first copy, starts observing.  And copy the files when every changes.\n\nArguments is same as `cpx.copy`.\n\n`cpx.watch` returns an `EventEmitter`.\n\n- `.on(\"copy\", (e) => { ... })` : Be fired after file is copied. `e.srcPath` is a path of original file. `e.dstPath` is a path of new file.\n- `.on(\"remove\", (e) => { ... })` : Be fired after file is removed. `e.path` is a path of removed file.\n- `.on(\"watch-raedy\", () => { ... })` : Be fired when started watching files, after the first copying.\n- `.on(\"watch-error\", (err) => { ... })` : Be fired when occured errors during watching.\n\n## Changelog\n\n[GitHub Releases](https://github.com/mysticatea/cpx/releases)\n\n## Contributing\n\nThank you for contributions!\n\n### Bug Reports or Feature Requests\n\nPlease use GitHub Issues.\n\n### Document Corrections\n\nPlease use GitHub Pull Requests.\nI would especially thank for document corrections since I'm not familiar with English.\n\n### Feature Implementing\n\nPlease use GitHub Pull Requests.\n\nThere are some npm-scripts to help developments.\n\n- `npm test` - Run tests and collect coverage.\n- `npm run build` - Make lib directory from src directory.\n- `npm run clean` - Delete directories (folders) which are created by other commands.\n- `npm run lint` - Run ESLint.\n- `npm run watch` - Run tests (not collect coverage) when each file was modified.\n- `npm run open-coverage` - Open the coverage report of the last `npm test` command with web browser.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/mysticatea/cpx.git"
  },
  "scripts": {
    "build": "cross-env NODE_ENV=production babel src --out-dir .",
    "clean": "rimraf .nyc_output bin coverage lib test-ws",
    "codecov": "nyc report -r lcovonly && codecov",
    "lint": "if-node-version \">=4\" eslint src",
    "open-coverage": "nyc report -r lcov && opener coverage/lcov-report/index.html",
    "postversion": "git push && git push --tags",
    "prebuild": "npm run clean",
    "pretest": "run-s clean lint",
    "preversion": "run-s test build",
    "prewatch": "run-s clean lint",
    "test": "cross-env NODE_ENV=development nyc --require babel-register mocha test/*.js --timeout 60000",
    "watch": "cross-env NODE_ENV=development mocha test/*.js --compilers js:babel-register --timeout 60000 --watch --growl"
  },
  "version": "1.5.0"
}
